---
name: m-agent-Experiment-Pipeline
on:
  workflow_dispatch:
    inputs:
      experimentImage:
        default: "litmuschaos/go-runner:m-agent"
      operatorImage:
        default: "litmuschaos/chaos-operator:ci"
      runnerImage:
        default: "litmuschaos/chaos-runner:ci"
      chaosNamespace:
        default: "default"
      experimentImagePullPolicy:
        default: "Always"

jobs:
  Setup_m-agent:
    runs-on: ubuntu-latest
    outputs:
      endpoint: ${{ steps.get-credentials.outputs.endpoint }}
      token: ${{ steps.get-credentials.outputs.token }}
      pid: ${{ steps.get-target-process.outputs.pid }}
    steps:

    - name: Set up Google Cloud SDK
      if: always()
      uses: google-github-actions/setup-gcloud@v0
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Create a GCP VM Instance to Setup m-agent and Target Resources
      if: always()
      run: |
        gcloud compute instances create litmus-e2e-m-agent-vm-${{ github.run_number }} \
        --machine-type=f1-micro \
        --zone=us-east4-c \
        --metadata=startup-script='#! /bin/bash
        apt update
        apt -y install apache2
        curl https://raw.githubusercontent.com/litmuschaos/m-agent/master/scripts/install.sh | bash' 
        sleep 30

    - name: Get Agent Endpoint and Auth Token
      if: always()
      id: get-credentials
      run: |
        OUTPUT=$(gcloud compute ssh --zone us-east4-c litmus-e2e-m-agent-vm-${{ github.run_number }} -- 'm-agent --get-token --token-expiry-duration 30m')
        echo "::set-output name=endpoint::$(echo $OUTPUT | grep -o '"endpoint": "[^"]*' | grep -o '[^"]*$')"
        echo "::set-output name=token::$(echo $OUTPUT | grep -o '"token": "[^"]*' | grep -o '[^"]*$')"

        echo $OUTPUT | grep -o '"endpoint": "[^"]*' | grep -o '[^"]*$'
        echo $OUTPUT | grep -o '"token": "[^"]*' | grep -o '[^"]*$' | sed 's/./& /g'

        echo $OUTPUT | head -n 3 

    - name: Get main PID of the Apache Service as Target Process
      if: always()
      id: get-target-process
      run: |
        echo "::set-output name=pid::$(gcloud compute ssh --zone us-east4-c litmus-e2e-m-agent-vm-${{ github.run_number }} -- 'systemctl show --property MainPID --value apache2')"

  Process_Kill:
    needs: Setup_m-agent
    runs-on: ubuntu-latest
    env: 
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
    steps:
      - name: Set up Google Cloud SDK
        if: always()
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      #Install and configure a k3s cluster
      - name: Installing Prerequisites (K3S Cluster)
        env: 
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        run: |
          curl -sfL https://get.k3s.io | sh -s - --docker --write-kubeconfig-mode 664
          kubectl wait node --all --for condition=ready --timeout=90s
          mkdir -p $HOME/.kube && cat /etc/rancher/k3s/k3s.yaml > $HOME/.kube/config          
          kubectl get nodes
          
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'

      - name: Create Kubernetes secret for m-agent
        if: always()
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: agent-secret
          type: Opaque
          stringData:
            AGENT_ENDPOINT: "${{ needs.Setup_m-agent.outputs.endpoint }}"
            AUTH_TOKEN: "${{ needs.Setup_m-agent.outputs.token }}"
          EOF

      - name: Litmus Infra Setup
        if: always()
        run: make build-litmus
        env:
          OPERATOR_IMAGE: "${{ github.event.inputs.operatorImage }}"
          RUNNER_IMAGE: "${{ github.event.inputs.runnerImage }}"

      - name: Run Process Kill experiment in serial & parallel mode
        if: always()
        env:
          PROCESS_IDS: "${{ needs.Setup_m-agent.outputs.pid }}"
          EXPERIMENT_IMAGE: "${{ github.event.inputs.experimentImage }}"
          EXPERIMENT_IMAGE_PULL_POLICY: "${{ github.event.inputs.experimentImagePullPolicy }}"
          CHAOS_NAMESPACE: "${{ github.event.inputs.chaosNamespace }}"
        run: make process-kill

      - name: Delete GCP VM Instance
        if: always()
        run: |
          gcloud compute instances delete litmus-e2e-m-agent-vm-${{ github.run_number }} \
          --zone=us-east4-c \
          --quiet

      - name: "[Debug]: check chaos resources"
        if: ${{ failure() }}
        continue-on-error: true
        run: |
          bash <(curl -s https://raw.githubusercontent.com/litmuschaos/litmus-e2e/master/build/debug.sh)
          
      - name: "[Debug]: check operator logs"
        if: ${{ failure() }}
        continue-on-error: true
        run: |      
          operator_name=$(kubectl get pods -n litmus -l app.kubernetes.io/component=operator --no-headers | awk '{print$1}')
          kubectl logs $operator_name -n litmus > logs.txt
          cat logs.txt

      - name: Litmus Cleanup
        if: ${{ always() }} 
        run: make litmus-cleanup 
        
      - name: Deleting K3S cluster
        if: always()
        run: /usr/local/bin/k3s-uninstall.sh