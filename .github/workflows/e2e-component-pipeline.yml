---
name: Component-Pipeline
on:
  schedule:
    - cron: "30 20 * * *" # Daily 02:30 AM in midnight

env:
  e2eTestImage: "litmuschaos/litmus-e2e:ci"
  goExperimentImage: "litmuschaos/go-runner:ci"
  newLibImage: "litmuschaos/go-runner:ci"
  oldLibImage: "litmuschaos/go-runner:latest"
  operatorImage: "litmuschaos/chaos-operator:ci"
  runnerImage: "litmuschaos/chaos-runner:ci"
  chaosNamespace: "litmus"
  imagePullPolicy: "Always"
  experimentImagePullPolicy: "Always"
  updateWebsite: "true"

defaults:
  run:
    working-directory: /go/src

jobs:
  ### Setup Litmus

  Setup_Litmus_Infra:
    container:
      image: "${{ github.event.inputs.e2eTestImage }}"
      volumes:
        - /home/ubuntu/.kube:/root/.kube
        - /home/ubuntu/.aws:/root/.aws
        - /etc/kubernetes:/etc/kubernetes
      env:
        OPERATOR_IMAGE: "${{ github.event.inputs.operatorImage }}"
        OPERATOR_NAME: "${{ github.event.inputs.operatorName }}"
        RUNNER_IMAGE: "${{ github.event.inputs.runnerImage }}"
        IMAGE_PULL_POLICY: "${{ github.event.inputs.imagePullPolicy }}"
        KUBECONFIG: /root/.kube/config

    runs-on: [self-hosted, component]

    steps:
      - name: Litmus Infra Setup In Cluster-1
        run: |
          make build-litmus

  ### Setup App

  Setup_App_Deployment:
    needs: Setup_Litmus_Infra
    container:
      image: "${{ github.event.inputs.e2eTestImage }}"
      volumes:
        - /home/ubuntu/.kube:/root/.kube
        - /home/ubuntu/.aws:/root/.aws
        - /etc/kubernetes:/etc/kubernetes
      env:
        KUBECONFIG: /root/.kube/config

    runs-on: [self-hosted, component]
    steps:
      - name: Deploy App In Cluster-1
        run: make app-deploy

    ## TODO: Make use of app liveness check and aux app
    # - name: Liveness In Cluster-1
    #   if: ${{ always() }}
    #   run: make liveness

    # - name: Auxiliary App In Cluster-1
    #   if: ${{ always() }}
    #   run: make auxiliary-app

  ### Runing Component Tests

  Component_Test:
    needs: Setup_App_Deployment
    container:
      image: "${{ github.event.inputs.e2eTestImage }}"
      volumes:
        - /home/ubuntu/.kube:/root/.kube
        - /home/ubuntu/.aws:/root/.aws
        - /etc/kubernetes:/etc/kubernetes
      env:
        GO_EXPERIMENT_IMAGE: "${{ github.event.inputs.goExperimentImage }}"
        NEW_LIB_IMAGE: "${{ github.event.inputs.newLibImage }}"
        OLD_LIB_IMAGE: "${{ github.event.inputs.oldLibImage }}"
        EXPERIMENT_IMAGE_PULL_POLICY: "${{ github.event.inputs.experimentImagePullPolicy }}"
        CHAOS_NAMESPACE: "${{ github.event.inputs.chaosNamespace }}"
        UPDATE_WEBSITE: "${{ github.event.inputs.updateWebsite }}"
        KUBECONFIG: /root/.kube/config

    runs-on: [self-hosted, component]
    steps:
      - name: TCID-EC2-GENERIC-OPERATOR-RECONCILE-RESILIENCY
        run: make operator-reconcile-resiliency-check

      - name: TCID-EC2-GENERIC-OPERATOR-ADMIN-MODE
        if: ${{ always() }}
        run: make admin-mode-check

      - name: TCID-EC2-GENERIC-ENGINE-APP-INFO
        if: ${{ always() }}
        run: make appinfo

      - name: TCID-EC2-GENERIC-ENGINE-ANNOTATION-CHECK
        if: ${{ always() }}
        run: make annotation-check

      - name: TCID-EC2-GENERIC-ENGINE-ENGINE-STATE
        if: ${{ always() }}
        run: make engine-state

      - name: TCID-EC2-GENERIC-ENGINE-JOB-CLEANUP-POLICY
        if: ${{ always() }}
        run: make job-cleanup-policy

      - name: TCID-EC2-GENERIC-ENGINE-SERVICE-ACCOUNT
        if: ${{ always() }}
        run: make service-account

      - name: TCID-EC2-GENERIC-EXPERIMENT-EXPERIMENT-IMAGE-NAME
        if: ${{ always() }}
        run: make experiment-image

      - name: TCID-EC2-GENERIC-EXPERIMENT-TARGET-POD
        if: ${{ always() }}
        run: make target-pod

  ### App Cleanup

  App_Cleanup:
    needs: Component_Test
    if: always()
    container:
      image: "${{ github.event.inputs.e2eTestImage }}"
      volumes:
        - /home/ubuntu/.kube:/root/.kube
        - /home/ubuntu/.aws:/root/.aws
        - /etc/kubernetes:/etc/kubernetes
      env:
        KUBECONFIG: /root/.kube/config

    runs-on: [self-hosted, component]
    steps:
      - name: Application Cleanup
        run: make app-cleanup

  ### Website Update

  Pipeline_Update:
    needs: App_Cleanup
    if: always()
    container:
      image: "${{ github.event.inputs.e2eTestImage }}"
      volumes:
        - /home/ubuntu/.kube:/root/.kube
        - /home/ubuntu/.aws:/root/.aws
        - /etc/kubernetes:/etc/kubernetes
      env:
        KUBECONFIG: /root/.kube/config
        CI_PIPELINE_ID: ${{ github.run_id }}
        COMPONENT_TEST: "true"

    runs-on: [self-hosted, component]
    steps:
      - name: Pipeline Update
        run: make pipeline-status-update

  ### Litmus Cleanup

  Litmus_Cleanup:
    needs: App_Cleanup
    if: always()
    container:
      image: "${{ github.event.inputs.e2eTestImage }}"
      volumes:
        - /home/ubuntu/.kube:/root/.kube
        - /home/ubuntu/.aws:/root/.aws
        - /etc/kubernetes:/etc/kubernetes
      env:
        KUBECONFIG: /root/.kube/config
        COMPONENT_TEST: "true"

    runs-on: [self-hosted, component]
    steps:
      - name: Litmus Cleanup
        run: make litmus-cleanup
