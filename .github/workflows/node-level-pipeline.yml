---
name: Node-Level-Pipeline
on:
  workflow_dispatch:
    inputs:
      e2eTestImage:
        default: 'litmuschaos/litmus-e2e:ci'
      goExperimentImage:
        default: 'litmuschaos/go-runner:ci'
      newLibImage:
        default: 'litmuschaos/go-runner:ci'
      oldLibImage:
        default: 'litmuschaos/go-runner:latest'        
      operatorImage:
        default: 'litmuschaos/chaos-operator:ci'
      runnerImage:
        default: 'litmuschaos/chaos-runner:ci'
      chaosNamespace:
        default: 'litmus'
      imagePullPolicy:
        default: 'Always'
      experimentImagePullPolicy:
        default: 'Always'
      updateWebsite: 
        default: 'false'

defaults:
  run:
    working-directory: /go/src   

jobs:

### Setup Litmus
  Setup_Litmus_Infra:
    container: 
      image: "${{ github.event.inputs.e2eTestImage }}"
      volumes:
        - /home/ubuntu/.kube:/root/.kube
        - /home/ubuntu/.aws:/root/.aws
        - /etc/kubernetes:/etc/kubernetes
      env:
        OPERATOR_IMAGE: "${{ github.event.inputs.operatorImage }}"
        OPERATOR_NAME: "${{ github.event.inputs.operatorName }}"        
        RUNNER_IMAGE: "${{ github.event.inputs.runnerImage }}"
        IMAGE_PULL_POLICY: "${{ github.event.inputs.imagePullPolicy }}"
        KUBECONFIG: /root/.kube/config

    runs-on: [self-hosted,node-level]
    ## As the default path is repository checkout path.      
    steps:
      - name: Litmus Infra Setup In Cluster-3
        run: |
          make build-litmus
        
### Setup App
  Setup_App_Deployment:
    needs:  Setup_Litmus_Infra
    container: 
      image: "${{ github.event.inputs.e2eTestImage }}"
      volumes:
        - /home/ubuntu/.kube:/root/.kube
        - /home/ubuntu/.aws:/root/.aws
        - /etc/kubernetes:/etc/kubernetes
      env:
        KUBECONFIG: /root/.kube/config

    runs-on: [self-hosted,node-level]   
    steps:
      - name: Deploy App In Cluster-3
        run: make app-deploy        

    ## TODO: Make use of app liveness check and aux app
      # - name: Liveness In Cluster-3
      #   if: always()
      #   run: make liveness        

      # - name: Auxiliary App In Cluster-3
      #   if: always()
      #   run: make auxiliary-app

### Runing Node Level Tests        
  Node_Level_Test:
    needs: Setup_App_Deployment
    if: always()
    container: 
      image: "${{ github.event.inputs.e2eTestImage }}"
      volumes:
        - /home/ubuntu/.kube:/root/.kube
        - /home/ubuntu/.aws:/root/.aws        
        - /etc/kubernetes:/etc/kubernetes
      env:
        GO_EXPERIMENT_IMAGE: "${{ github.event.inputs.goExperimentImage }}"        
        NEW_LIB_IMAGE: "${{ github.event.inputs.newLibImage }}" 
        OLD_LIB_IMAGE: "${{ github.event.inputs.oldLibImage }}"                
        EXPERIMENT_IMAGE_PULL_POLICY: "${{ github.event.inputs.experimentImagePullPolicy }}"
        CHAOS_NAMESPACE: "${{ github.event.inputs.chaosNamespace }}"
        UPDATE_WEBSITE: "${{ github.event.inputs.updateWebsite }}"
        KUBECONFIG: /root/.kube/config

    runs-on: [self-hosted,node-level]   
    steps:
      - name: TCID-EC2-GENERIC-INFRA-POD-AUTOSCALER
        run: make pod-autoscaler

      - name: TCID-EC2-GENERIC-INFRA-NODE-CPU-HOG
        if: always()
        run: make node-cpu-hog

      - name: TCID-EC2-GENERIC-INFRA-NODE-MEMORY-HOG
        if: always()
        run: make node-memory-hog

      - name: TCID-EC2-GENERIC-INFRA-NODE-DRAIN
        if: always()
        run: make node-drain

      - name: TCID-EC2-GENERIC-INFRA-KUBELET-SERVICE-KILL
        if: always()
        run: make kubelet-service-kill

      - name: TCID-EC2-GENERIC-INFRA-NODE-TAINT
        if: always()
        run: make node-taint

      - name: TCID-EC2-GENERIC-INFRA-NODE-IO-STRESS
        if: always()
        run: make node-io-stress
        
### Runing Experiment Tunables        
  Engine_Test:
    needs: Node_Level_Test
    if: always()
    container: 
      image: "${{ github.event.inputs.e2eTestImage }}"
      volumes:
        - /home/ubuntu/.kube:/root/.kube
        - /home/ubuntu/.aws:/root/.aws        
        - /etc/kubernetes:/etc/kubernetes
      env:
        GO_EXPERIMENT_IMAGE: "${{ github.event.inputs.goExperimentImage }}"        
        NEW_LIB_IMAGE: "${{ github.event.inputs.newLibImage }}" 
        OLD_LIB_IMAGE: "${{ github.event.inputs.oldLibImage }}"                
        EXPERIMENT_IMAGE_PULL_POLICY: "${{ github.event.inputs.experimentImagePullPolicy }}"
        CHAOS_NAMESPACE: "${{ github.event.inputs.chaosNamespace }}"
        UPDATE_WEBSITE: "${{ github.event.inputs.updateWebsite }}"
        KUBECONFIG: /root/.kube/config

    runs-on: [self-hosted,node-level]   
    steps:
      - name: TCID-EC2-GENERIC-INFRA-WITH-APP-INFO
        run: make with-app-info

      - name: TCID-EC2-GENERIC-ENV-FROM-SECRET-AND-CONFIGMAP
        if: always()
        run: make env-from-secret-and-configmap    
        
### App Cleanup
  App_Cleanup:
    needs: Engine_Test
    if: always()
    container: 
      image: "${{ github.event.inputs.e2eTestImage }}"
      volumes:
        - /home/ubuntu/.kube:/root/.kube
        - /home/ubuntu/.aws:/root/.aws        
        - /etc/kubernetes:/etc/kubernetes
      env:
        KUBECONFIG: /root/.kube/config

    runs-on: [self-hosted,node-level]    
    steps:
      - name: Application Cleanup      
        run: make app-cleanup

### Litmus Cleanup 
  Litmus_Cleanup:
    needs: App_Cleanup
    if: always()
    container: 
      image: "${{ github.event.inputs.e2eTestImage }}"
      volumes:
        - /home/ubuntu/.kube:/root/.kube
        - /home/ubuntu/.aws:/root/.aws        
        - /etc/kubernetes:/etc/kubernetes
      env:
        KUBECONFIG: /root/.kube/config
        NODE_LEVEL: "true"   

    runs-on: [self-hosted,node-level]      
    steps:
      - name: Litmus Cleanup      
        run: make litmus-cleanup
