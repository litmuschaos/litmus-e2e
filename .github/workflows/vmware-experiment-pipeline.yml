---
name: VMWare-Experiment-Pipeline
on:
  workflow_dispatch:
    inputs:
      experimentImage:
        default: "litmuschaos/go-runner:ci"
      operatorImage:
        default: "litmuschaos/chaos-operator:ci"
      runnerImage:
        default: "litmuschaos/chaos-runner:ci"
      chaosNamespace:
        default: "default"
      experimentImagePullPolicy:
        default: "Always"

jobs:
  VM_Poweroff:
    runs-on: ubuntu-latest
    env: 
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
    steps:

      #Install and configure a k3s cluster
      - name: Installing Prerequisites (K3S Cluster)
        run: |
          curl -sfL https://get.k3s.io | sh -s - --docker --write-kubeconfig-mode 664
          kubectl wait node --all --for condition=ready --timeout=90s
          mkdir -p $HOME/.kube && cat /etc/rancher/k3s/k3s.yaml > $HOME/.kube/config          
          kubectl get nodes
          
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'

      - name: Create Kubernetes secret for VMWare experiment
        if: always()
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: vcenter-secret
          type: Opaque
          stringData:
            VCENTERSERVER: ${{ secrets.VCENTERSERVER }}
            VCENTERUSER: ${{ secrets.VCENTERUSER }}
            VCENTERPASS: ${{ secrets.VCENTERPASS }}

      - name: Litmus Infra Setup
        if: always()
        run: make build-litmus
        env:
          OPERATOR_IMAGE: "${{ github.event.inputs.operatorImage }}"
          RUNNER_IMAGE: "${{ github.event.inputs.runnerImage }}"

      - name: Run VM-Poweroff experiment in serial & parallel mode
        if: always()
        env:
          APP_VM_MOIDS: ${{ secrets.VM_MOIDS }}
          EXPERIMENT_IMAGE: "${{ github.event.inputs.experimentImage }}"
          EXPERIMENT_IMAGE_PULL_POLICY: "${{ github.event.inputs.experimentImagePullPolicy }}"
          CHAOS_NAMESPACE: "${{ github.event.inputs.chaosNamespace }}"
        run: make vm-poweroff

      - name: "[Debug]: check chaos resources"
        if: ${{ failure() }}
        continue-on-error: true
        run: |
          bash <(curl -s https://raw.githubusercontent.com/litmuschaos/litmus-e2e/master/build/debug.sh)
          
      - name: "[Debug]: check operator logs"
        if: ${{ failure() }}
        continue-on-error: true
        run: |      
          operator_name=$(kubectl get pods -n litmus -l app.kubernetes.io/component=operator --no-headers | awk '{print$1}')
          kubectl logs $operator_name -n litmus > logs.txt
          cat logs.txt

      - name: Litmus Cleanup
        if: ${{ always() }}     
        run: make litmus-cleanup 
      
      - name: Deleting K3S cluster
        if: always()
        run: /usr/local/bin/k3s-uninstall.sh
