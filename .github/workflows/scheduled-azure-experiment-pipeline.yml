---
name: Scheduled-Azure-Experiment-Pipeline
on:
  schedule:
    - cron: "30 22 * * *" # Daily 02:30 AM in midnight

jobs:
  Azure_VM_Instance_Stop:
    runs-on: ubuntu-latest
    steps:

      #Install and configure a k3s cluster
      - name: Installing Prerequisites (K3S Cluster)
        env: 
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        run: |
          curl -sfL https://get.k3s.io | sh -s - --docker --write-kubeconfig-mode 664
          kubectl wait node --all --for condition=ready --timeout=90s
          mkdir -p $HOME/.kube && cat /etc/rancher/k3s/k3s.yaml > $HOME/.kube/config          
          kubectl get nodes
          
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'

      - name: Create Kubernetes secret for azure experiment
        if: always()
        env:
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: cloud-secret
          type: Opaque
          stringData:
            azure.auth: |-
              ${{ secrets.AZURE_CREDENTIALS }}
          EOF
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create target Azure VM Instances
        if: always()
        run: |
          az group create --name ${{ secrets.RESOURCE_GROUP }} --location eastus && \
          az vm create \
          --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.INSTANCE_ONE }} \
          --image UbuntuLTS --generate-ssh-keys && \
          az vm create \
          --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.INSTANCE_TWO }} \
          --image UbuntuLTS --generate-ssh-keys
      - name: Litmus Infra Setup
        if: always()
        run: make build-litmus
        env:
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml


      - name: Run Azure VM Instance Stop experiment in serial & parallel mode
        if: always()
        env:
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml
          AZURE_INSTANCE_NAME: "${{ secrets.INSTANCE_ONE }},${{ secrets.INSTANCE_TWO }}"
          RESOURCE_GROUP: "${{ secrets.RESOURCE_GROUP }}"
          GO_EXPERIMENT_IMAGE: "${{ github.event.inputs.goExperimentImage }}"
          EXPERIMENT_IMAGE_PULL_POLICY: "${{ github.event.inputs.experimentImagePullPolicy }}"
          CHAOS_NAMESPACE: "${{ github.event.inputs.chaosNamespace }}"
        run: make azure-vm-instance-stop

      - name: Delete target Azure VM Instances
        if: always()
        run: |
          az vm delete --ids $(az vm list -g ${{ secrets.RESOURCE_GROUP }} --query "[].id" -o tsv) --yes && \
          az group delete -n ${{ secrets.RESOURCE_GROUP }} --yes
      - name: "[Debug]: check chaos resources"
        if: ${{ failure() }}
        continue-on-error: true
        run: |
          bash <(curl -s https://raw.githubusercontent.com/litmuschaos/litmus-e2e/master/build/debug.sh)
          
      - name: "[Debug]: check operator logs"
        if: ${{ failure() }}
        continue-on-error: true
        run: |      
          operator_name=$(kubectl get pods -n litmus -l app.kubernetes.io/component=operator --no-headers | awk '{print$1}')
          kubectl logs $operator_name -n litmus > logs.txt
          cat logs.txt
      - name: Litmus Cleanup
        if: ${{ always() }}      
        run: make litmus-cleanup 

      - name: Deleting K3S cluster
        if: always()
        run: /usr/local/bin/k3s-uninstall.sh

  Azure_VM_Disk_Loss:
    runs-on: ubuntu-latest
    needs: Azure_VM_Instance_Stop
    steps:

      #Install and configure a k3s cluster
      - name: Installing Prerequisites (K3S Cluster)
        env: 
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        run: |
          curl -sfL https://get.k3s.io | sh -s - --docker --write-kubeconfig-mode 664
          kubectl wait node --all --for condition=ready --timeout=90s
          mkdir -p $HOME/.kube && cat /etc/rancher/k3s/k3s.yaml > $HOME/.kube/config          
          kubectl get nodes
          
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'

      - name: Create Kubernetes secret for azure experiment
        if: always()
        env:
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: cloud-secret
          type: Opaque
          stringData:
            azure.auth: |-
              ${{ secrets.AZURE_CREDENTIALS }}
          EOF
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create a Azure VM Instance with target Disk Volumes
        if: always()
        run: |
          az group create --name ${{ secrets.RESOURCE_GROUP }} --location eastus && \
          az vm create \
          --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.INSTANCE_ONE }} \
          --image UbuntuLTS --generate-ssh-keys && \
          az vm disk attach \
          --resource-group ${{ secrets.RESOURCE_GROUP }} --vm-name ${{ secrets.INSTANCE_ONE }} \
          --name ${{ secrets.DISK_ONE }} --new && \
          az vm disk attach \
          --resource-group ${{ secrets.RESOURCE_GROUP }} --vm-name ${{ secrets.INSTANCE_ONE }} \
          --name ${{ secrets.DISK_TWO }} --new
      - name: Litmus Infra Setup
        if: always()
        run: make build-litmus
        env:
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml

      - name: Run Azure VM Disk Loss experiment in serial & parallel mode
        if: always()
        env:
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml
          AZURE_DISK_NAME: "litmus-e2e-first-disk-${{ github.run_number }},litmus-e2e-second-disk-${{ github.run_number }}"
          RESOURCE_GROUP: "${{ secrets.RESOURCE_GROUP }}"
        run: make azure-vm-disk-loss

      - name: Delete the VM Instance and target Disk Volumes
        if: always()
        run: |
          az vm disk detach \ 
          -g ${{ secrets.RESOURCE_GROUP }} --vm-name ${{ secrets.INSTANCE_ONE }} \
          --name ${{ secrets.DISK_ONE }} && \
          az vm disk detach \ 
          -g ${{ secrets.RESOURCE_GROUP }} --vm-name ${{ secrets.INSTANCE_ONE }} \
          --name ${{ secrets.DISK_TWO }} && \
          az disk delete --name ${{ secrets.DISK_ONE }} -g ${{ secrets.RESOURCE_GROUP }} --yes && \
          az disk delete --name ${{ secrets.DISK_TWO }} -g ${{ secrets.RESOURCE_GROUP }} --yes && \
          az vm delete --ids $(az vm list -g ${{ secrets.RESOURCE_GROUP }} --query "[].id" -o tsv) --yes && \
          az group delete -n ${{ secrets.RESOURCE_GROUP }} --yes
      - name: "[Debug]: check chaos resources"
        if: ${{ failure() }}
        continue-on-error: true
        run: |
          bash <(curl -s https://raw.githubusercontent.com/litmuschaos/litmus-e2e/master/build/debug.s`h)
          
      - name: "[Debug]: check operator logs"
        if: ${{ failure() }}
        continue-on-error: true
        run: |      
          operator_name=$(kubectl get pods -n litmus -l app.kubernetes.io/component=operator --no-headers | awk '{print$1}')
          kubectl logs $operator_name -n litmus > logs.txt
          cat logs.txt
      - name: Litmus Cleanup
        if: ${{ always() }}      
        run: make litmus-cleanup 

      - name: Deleting K3S cluster
        if: always()
        run: /usr/local/bin/k3s-uninstall.sh