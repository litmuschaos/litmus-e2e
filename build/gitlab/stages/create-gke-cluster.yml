---
- hosts: localhost
  gather_facts: yes

  vars_files:
    - vars.yml
  vars:
    cluster_name:
    test_case_name: "GKE_CREATE_CLUSTER"

  tasks:

    - block:

        - name: Generating Random Cluster Name
          shell: python ../../utils/name_generator/namesgenerator.py
          register: cluster_name
          when: not cluster_name

        - set_fact:
            cluster_name: "{{ cluster_name.stdout }}"
          when: cluster_name.stdout is defined

        - name: Generate SSH Keys 
          shell: yes y | ssh-keygen -t rsa -N "" -f $HOME/.ssh/{{ ssh_key_fn }} -C {{ ssh_user }}
          args:
            executable: /bin/bash
          no_log: True

        - name: Format SSH Key for GKE
          shell: sed -i '1s/^/{{ ssh_user }}:/' $HOME/.ssh/{{ ssh_key_fn }}.pub
          args:
            executable: /bin/bash
            warn: False

        - name: Select a region to create the cluster
          set_fact: 
            set_zone: "{{ item }}"
          with_random_choice: "{{ zone }}"

        - name: create GKE cluster
          shell: > 
            gcloud container clusters create {{ cluster_name }}  --enable-autoscaling --max-nodes=5 
            --min-nodes=3 --machine-type=n1-standard-4 --disk-size=80 --image-type=ubuntu 
            --zone {{ set_zone }}  --project={{ project }}  --scopes=https://www.googleapis.com/auth/cloud-platform

        - name: Save cluster info
          lineinfile:
            create: yes
            state: present
            path: "~/logs/clusters"
            line: "{{ cluster_name }}"

        - name: Save zone info
          lineinfile:
            create: yes
            state: present
            path: "~/logs/zone"
            line: "{{ set_zone }}"

        - name: Get the kubeconfig and set kubectl for RBAC
          shell: gcloud container clusters get-credentials {{ cluster_name }} --zone={{ set_zone }}
          args:
            executable: /bin/bash
          no_log: True 

        - name: Set kubectl context to admin context
          shell: kubectl create clusterrolebinding cluster-admin-binding --clusterrole=cluster-admin --user={{user}}
          args:
            executable: /bin/bash
          no_log: True

        - name: Get Nodes
          shell: kubectl get nodes -o=custom-columns=NAME:.metadata.name --no-headers
          args:
            executable: /bin/bash
          register: node_names

        - name: Set SSH connections
          shell: gcloud compute instances add-metadata {{item}} --metadata-from-file ssh-keys=$HOME/.ssh/{{ ssh_key_fn }}.pub --zone={{ set_zone }}
          args:
            executable: /bin/bash
          loop: "{{ node_names.stdout_lines }}"
          no_log: True

        - name: Set Test Status
          set_fact:
            flag: "Test Passed"

      rescue:  
        - name: Set Test Status
          set_fact:
            flag: "Test Failed"

        - fail:
            msg: "The cluster creation failed"
          when: true

