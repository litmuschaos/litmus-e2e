#!/bin/bash
# This script will
# 1. setup aws configuration
# 2. create an eks cluster
# 3. use context of $HOME/.kube/config
set -e

path=$(pwd)
echo $path
CI_PIPELINE_ID=$(echo $CI_PIPELINE_ID)
cluster_name="portal-e2e-litmus-"$CI_PIPELINE_ID

# setup aws configuration
echo '#### SETTING UP AWS CONFIGURATION ####'
aws configure set default.region ${region}
aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID_PORTAL}
aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY_PORTAL}

# creating an eks cluster with the given cluster info
chmod +x build/eks/eks_bootstrap_script
./build/eks/eks_bootstrap_script -c ${cluster_name} -n ${nodes} -r ${region} -m ${node_type} up

node_group="eksctl-"${cluster_name}"-nodegroup-ng-*"

# Getting SecurityGroup ID of node-group using group-name regex as filter
export SG_ID=$(aws ec2 describe-security-groups \
    --filters Name=group-name,Values=$node_group \
    --query "SecurityGroups[0].GroupId")

echo $SG_ID

# Removing extra quotes from SecurityGroup ID
SG_ID=$(sed -e 's/^"//' -e 's/"$//' <<< ${SG_ID})

# Adding one inbound rule to Group with all permissions.
OUTPUT=$(aws ec2 authorize-security-group-ingress --group-id ${SG_ID} --protocol all --cidr 0.0.0.0/0)

# use context of $HOME/.kube/config
mkdir $path/.kube
mkdir $path/.kube/resources
cat ~/.kube/config > $path/.kube/config
cat ~/.kube/config > $path/.kube/admin.conf
kubectl get nodes
